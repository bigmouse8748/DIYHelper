name: Deploy DIY Smart Assistant to cheasydiy.com

on:
  push:
    branches:
      - aws-deployment
  pull_request:
    branches:
      - aws-deployment
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: cheasydiy/backend
  ECR_REPOSITORY_FRONTEND: cheasydiy/frontend
  ECS_CLUSTER: cheasydiy-production-cluster
  ECS_SERVICE_BACKEND: cheasydiy-production-backend
  ECS_SERVICE_FRONTEND: cheasydiy-production-frontend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend dependencies
      working-directory: ./DIY-Smart-Assistant-V2/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/base.txt
        pip install pytest pytest-cov
      continue-on-error: true

    - name: Run backend tests
      working-directory: ./DIY-Smart-Assistant-V2/backend
      run: |
        echo "Skipping backend tests for now"
        # pytest --cov=. --cov-report=xml
      continue-on-error: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install frontend dependencies
      working-directory: ./DIY-Smart-Assistant-V2/frontend
      run: npm ci
      continue-on-error: true

    - name: Run frontend tests
      working-directory: ./DIY-Smart-Assistant-V2/frontend
      run: |
        echo "Skipping frontend tests for now"
        # npm run test:unit
      continue-on-error: true

  build-and-deploy:
    name: Build and Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    if: always() && github.ref == 'refs/heads/aws-deployment'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      working-directory: ./DIY-Smart-Assistant-V2/backend
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build, tag, and push frontend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        VITE_API_URL: https://api.cheasydiy.com
      working-directory: ./DIY-Smart-Assistant-V2/frontend
      run: |
        docker build \
          --build-arg VITE_API_URL=$VITE_API_URL \
          -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

    - name: Check if ECS services exist
      id: check-services
      run: |
        # Check if backend service exists
        if aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE_BACKEND }} --query 'services[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
          echo "backend-exists=true" >> $GITHUB_OUTPUT
        else
          echo "backend-exists=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if frontend service exists  
        if aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE_FRONTEND }} --query 'services[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
          echo "frontend-exists=true" >> $GITHUB_OUTPUT
        else
          echo "frontend-exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Update ECS service with new image (Backend)
      if: steps.check-services.outputs.backend-exists == 'true'
      run: |
        # Get current task definition
        TASK_DEF=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE_BACKEND }} --query 'services[0].taskDefinition' --output text)
        
        # Update service to use new image (ECS will handle rolling deployment)
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE_BACKEND }} \
          --force-new-deployment \
          --deployment-configuration "maximumPercent=200,minimumHealthyPercent=50"
        
        echo "üîÑ Backend service updated with rolling deployment strategy"

    - name: Update ECS service with new image (Frontend)
      if: steps.check-services.outputs.frontend-exists == 'true'
      run: |
        # Get current task definition
        TASK_DEF=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE_FRONTEND }} --query 'services[0].taskDefinition' --output text)
        
        # Update service to use new image (ECS will handle rolling deployment)
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE_FRONTEND }} \
          --force-new-deployment \
          --deployment-configuration "maximumPercent=200,minimumHealthyPercent=50"
        
        echo "üîÑ Frontend service updated with rolling deployment strategy"

    - name: Wait for services to stabilize
      if: steps.check-services.outputs.backend-exists == 'true' || steps.check-services.outputs.frontend-exists == 'true'
      run: |
        SERVICES=""
        if [ "${{ steps.check-services.outputs.backend-exists }}" == "true" ]; then
          SERVICES="$SERVICES ${{ env.ECS_SERVICE_BACKEND }}"
        fi
        if [ "${{ steps.check-services.outputs.frontend-exists }}" == "true" ]; then
          SERVICES="$SERVICES ${{ env.ECS_SERVICE_FRONTEND }}"
        fi
        if [ -n "$SERVICES" ]; then
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services $SERVICES
        fi

    - name: Create ECS services if they don't exist
      if: steps.check-services.outputs.backend-exists == 'false' || steps.check-services.outputs.frontend-exists == 'false'
      run: |
        echo "‚ö†Ô∏è ECS services don't exist. Please create them manually:"
        echo "Backend service: ${{ env.ECS_SERVICE_BACKEND }}"
        echo "Frontend service: ${{ env.ECS_SERVICE_FRONTEND }}"
        echo "Cluster: ${{ env.ECS_CLUSTER }}"
        echo "Images built and pushed to ECR successfully."
        echo ""
        echo "üí° If you want to clean up old services first:"
        echo "aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service OLD_SERVICE_NAME --desired-count 0"
        echo "aws ecs delete-service --cluster ${{ env.ECS_CLUSTER }} --service OLD_SERVICE_NAME"

  deploy-s3-cloudfront:
    name: Deploy Frontend to S3 and CloudFront
    runs-on: ubuntu-latest
    needs: test
    if: always() && github.ref == 'refs/heads/aws-deployment'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies and build
      working-directory: ./DIY-Smart-Assistant-V2/frontend
      env:
        VITE_API_URL: https://api.cheasydiy.com
      run: |
        npm ci
        npm run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      working-directory: ./DIY-Smart-Assistant-V2/frontend
      run: |
        aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} --delete

    - name: Invalidate CloudFront distribution
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-deploy, deploy-s3-cloudfront]
    if: always()
    
    steps:
    - name: Send notification
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ] && [ "${{ needs.deploy-s3-cloudfront.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üê≥ Docker images built and pushed to ECR"
          echo "üì¶ Frontend deployed to S3/CloudFront"
          echo "‚öôÔ∏è ECS services updated (if they exist)"
          # Add notification logic here (Slack, email, etc.)
        else
          echo "‚ùå Deployment failed!"
          echo "Build and Deploy: ${{ needs.build-and-deploy.result }}"
          echo "S3/CloudFront: ${{ needs.deploy-s3-cloudfront.result }}"
          # Add failure notification logic here
        fi