name: Deploy DIY Smart Assistant to cheasydiy.com

on:
  push:
    branches:
      - aws-deployment
  pull_request:
    branches:
      - aws-deployment
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: cheasydiy/backend
  ECR_REPOSITORY_FRONTEND: cheasydiy/frontend
  ECS_CLUSTER: cheasydiy-production-cluster
  ECS_SERVICE_BACKEND: cheasydiy-production-backend
  ECS_SERVICE_FRONTEND: cheasydiy-production-frontend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend dependencies
      working-directory: ./diy-agent-system/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
      continue-on-error: true

    - name: Run backend tests
      working-directory: ./diy-agent-system/backend
      run: |
        echo "Skipping backend tests for now"
        # pytest --cov=. --cov-report=xml
      continue-on-error: true

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install frontend dependencies
      working-directory: ./diy-agent-system/frontend
      run: npm ci
      continue-on-error: true

    - name: Run frontend tests
      working-directory: ./diy-agent-system/frontend
      run: |
        echo "Skipping frontend tests for now"
        # npm run test:unit
      continue-on-error: true

  build-and-deploy:
    name: Build and Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    if: always() && github.ref == 'refs/heads/aws-deployment'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      working-directory: ./diy-agent-system/backend
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build, tag, and push frontend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        VITE_API_URL: https://api.cheasydiy.com
      working-directory: ./diy-agent-system/frontend
      run: |
        docker build \
          --build-arg VITE_API_URL=$VITE_API_URL \
          -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

    - name: Update ECS service (Backend)
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE_BACKEND }} \
          --force-new-deployment

    - name: Update ECS service (Frontend)
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE_FRONTEND }} \
          --force-new-deployment

    - name: Wait for services to stabilize
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE_BACKEND }} ${{ env.ECS_SERVICE_FRONTEND }}

  deploy-s3-cloudfront:
    name: Deploy Frontend to S3 and CloudFront
    runs-on: ubuntu-latest
    needs: test
    if: always() && github.ref == 'refs/heads/aws-deployment'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies and build
      working-directory: ./diy-agent-system/frontend
      env:
        VITE_API_URL: https://api.cheasydiy.com
      run: |
        npm ci
        npm run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      working-directory: ./diy-agent-system/frontend
      run: |
        aws s3 sync dist/ s3://cheasydiy.com \
          --delete \
          --cache-control "public, max-age=31536000" \
          --exclude "index.html" \
          --exclude "*.json"
        
        aws s3 cp dist/index.html s3://cheasydiy.com/index.html \
          --cache-control "no-cache, no-store, must-revalidate"
        
        aws s3 cp dist/ s3://cheasydiy.com/ \
          --recursive \
          --exclude "*" \
          --include "*.json" \
          --cache-control "no-cache, no-store, must-revalidate"

    - name: Invalidate CloudFront distribution
      run: |
        # Get CloudFront distribution ID for cheasydiy.com
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases.Items[0]=='cheasydiy.com'].Id" --output text)
        aws cloudfront create-invalidation \
          --distribution-id $DISTRIBUTION_ID \
          --paths "/*"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-deploy, deploy-s3-cloudfront]
    if: always()
    
    steps:
    - name: Send notification
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ] && [ "${{ needs.deploy-s3-cloudfront.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
          # Add notification logic here (Slack, email, etc.)
        else
          echo "❌ Deployment failed!"
          # Add failure notification logic here
        fi